trigger: none

pool:
  vmImage: 'windows-latest'

variables:
- group: DL-Secrets   # APP_ID, TENANT_ID, ORG_DOMAIN, PFX_PASSWORD, MAIL_FROM, MAIL_TO, MAIL_SUBJECT

steps:
- checkout: self

# Download previous snapshot & report from last successful run
- task: DownloadPipelineArtifact@2
  displayName: Download Previous DL State
  continueOnError: true
  inputs:
    artifact: 'DLReport'
    path: '$(Build.SourcesDirectory)/prev'
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: 11
    runVersion: 'latest'

# Download the PFX used by your app (cert-based auth)
- task: DownloadSecureFile@1
  name: fetchCert
  displayName: Download PFX certificate
  inputs:
    secureFile: 'DLTrackingCert.pfx'

# Install required PowerShell modules
- task: PowerShell@2
  displayName: Install Modules (EXO + Microsoft Graph)
  inputs:
    targetType: inline
    pwsh: true
    script: |
      Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      Install-Module ExchangeOnlineManagement -Scope CurrentUser -Force -AllowClobber
      Install-Module Microsoft.Graph -Scope CurrentUser -Force
      Import-Module ExchangeOnlineManagement
      Import-Module Microsoft.Graph

# (Optional) list scripts for debugging
- task: PowerShell@2
  displayName: Debug - List all .ps1 files
  inputs:
    targetType: inline
    pwsh: true
    script: |
      Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter *.ps1

# Run the main script (build report + email via Graph app-only)
- task: PowerShell@2
  displayName: Run DL Tracking Script
  inputs:
    targetType: inline
    pwsh: true
    script: |
      # Import certificate to CurrentUser\My so EXO/Graph can find it by thumbprint
      $certPath = "$(fetchCert.secureFilePath)"
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($certPath, "$(PFX_PASSWORD)", "PersistKeySet")
      $store = New-Object System.Security.Cryptography.X509Certificates.X509Store "My", "CurrentUser"
      $store.Open("ReadWrite")
      $store.Add($cert)
      $store.Close()
      $thumbprint = $cert.Thumbprint

      # Paths
      $prevFile   = "$(Build.SourcesDirectory)/prev/previousMembers.json"
      $reportFile = "$(Build.SourcesDirectory)/DLchanges_Report.html"

      # Ensure baseline exists
      if (-not (Test-Path $prevFile)) {
        '{}' | Out-File $prevFile -Encoding utf8
        Write-Host "No previous state found â€” initialized empty JSON at $prevFile"
      }

      # Run script (your script must include the Graph email block & params)
      & "$(Build.SourcesDirectory)/Distribution_lists/DLchanges.ps1" `
        -appId "$(APP_ID)" `
        -tenantId "$(TENANT_ID)" `
        -orgName "$(ORG_DOMAIN)" `
        -thumbprint $thumbprint `
        -previous $prevFile `
        -report $reportFile `
        -mailFrom "$(MAIL_FROM)" `
        -mailTo "$(MAIL_TO)" `
        -mailSubject "$(MAIL_SUBJECT)"

# Collect outputs for publishing
- task: PowerShell@2
  displayName: Move output files to folder
  inputs:
    targetType: inline
    pwsh: true
    script: |
      New-Item -ItemType Directory -Force -Path output | Out-Null
      Move-Item -Path "$(Build.SourcesDirectory)/DLchanges_Report.html" -Destination output/ -Force
      Move-Item -Path "$(Build.SourcesDirectory)/prev/previousMembers.json" -Destination output/ -Force

# Publish report + state so next run can download it
- publish: output
  artifact: DLReport
  displayName: Publish Report + State Files
