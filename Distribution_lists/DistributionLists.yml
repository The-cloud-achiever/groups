trigger: none

pool:
  vmImage: 'windows-latest'

variables:
- group: DL-Secrets

steps:
- checkout: self

# Download previous state/report from last successful build of pipeline 11
- task: DownloadPipelineArtifact@2
  displayName: Download Previous DL State
  continueOnError: true
  inputs:
    artifact: 'DLReport'
    path: '$(Build.SourcesDirectory)/prev'
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: 11
    runVersion: 'latest'

# Download certificate (PFX) from Secure Files
- task: DownloadSecureFile@1
  name: fetchCert
  displayName: Download PFX certificate
  inputs:
    secureFile: 'DLTrackingCert.pfx'

# Install ExchangeOnline + Graph modules (install only)
- task: PowerShell@2
  displayName: Install modules
  inputs:
    targetType: inline
    pwsh: true
    script: |
      Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
      }
      Install-Module ExchangeOnlineManagement -Scope CurrentUser -Force -AllowClobber -RequiredVersion 3.5.0 -AcceptLicense
      Install-Module Microsoft.Graph.Authentication -Scope CurrentUser -Force -AllowClobber -RequiredVersion 2.21.0 -AcceptLicense
      Install-Module Microsoft.Graph.Users.Actions  -Scope CurrentUser -Force -AllowClobber -RequiredVersion 2.21.0 -AcceptLicense

# Run DL Tracking Script
- task: PowerShell@2
  displayName: Run DL Tracking Script
  inputs:
    targetType: inline
    pwsh: true
    script: |
      # Import PFX to CurrentUser\My
      $pfxPass    = ConvertTo-SecureString $env:PFX_PASSWORD -AsPlainText -Force
      $imported   = Import-PfxCertificate -FilePath "$(fetchCert.secureFilePath)" -Password $pfxPass -CertStoreLocation Cert:\CurrentUser\My
      $thumbprint = $imported.Thumbprint

      # Resolve paths from variable group
      $prevDir    = Join-Path "$(Build.SourcesDirectory)" "prev"
      New-Item -ItemType Directory -Force -Path $prevDir | Out-Null

      $prevFile   = Join-Path $prevDir $env:DL_HISTORY_FILE
      $reportFile = Join-Path "$(Build.SourcesDirectory)" $env:DL_REPORT_FILE

      if (-not (Test-Path $prevFile)) {
        '{}' | Out-File $prevFile -Encoding utf8
        Write-Host "No previous state found â€” initialized empty JSON at $prevFile"
      }

      Write-Host "Tenant: $($env:TENANT_ID)"
      Write-Host "Report: $reportFile"
      Write-Host "History: $prevFile"
      Write-Host "MAIL_FROM: $($env:MAIL_FROM)"
      Write-Host "MAIL_TO:   $($env:MAIL_TO)"

      & "$(Build.SourcesDirectory)/Distribution_lists/DLchanges.ps1" `
        -AppId       $env:APP_ID `
        -TenantId    $env:TENANT_ID `
        -OrgName     $env:ORG_DOMAIN `
        -Thumbprint  $thumbprint `
        -Previous    $prevFile `
        -Report      $reportFile `
        -MailFrom    $env:MAIL_FROM `
        -MailTo      $env:MAIL_TO `
        -MailSubject $env:MAIL_SUBJECT
  env:
    # variable group -> environment used above and passed into the script
    APP_ID: $(APP_ID)
    TENANT_ID: $(TENANT_ID)
    ORG_DOMAIN: $(ORG_DOMAIN)
    PFX_PASSWORD: $(PFX_password)
    MAIL_FROM: $(MAIL_FROM)
    MAIL_TO: $(MAIL_TO)
    MAIL_SUBJECT: $(MAIL_SUBJECT)
    DL_HISTORY_FILE: $(DL_HISTORY_FILE)
    DL_REPORT_FILE: $(DL_REPORT_FILE)

# Stage outputs for next run + artifact
- task: PowerShell@2
  displayName: Stage output files
  inputs:
    targetType: inline
    pwsh: true
    script: |
      New-Item -ItemType Directory -Force -Path output | Out-Null
      Copy-Item -Path "$(Build.SourcesDirectory)/$env:DL_REPORT_FILE" -Destination output/ -Force
      Copy-Item -Path "$(Build.SourcesDirectory)/prev/$env:DL_HISTORY_FILE" -Destination output/ -Force

# Publish report + state so the next run can download it
- publish: output
  artifact: DLReport
  displayName: Publish Report + State Files
