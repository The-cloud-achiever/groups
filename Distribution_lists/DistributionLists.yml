trigger: none

pool:
  vmImage: 'windows-latest'

variables:
- group: DL-Secrets

steps:
- checkout: self

#✅ Optional: Try to download previous DL state (skip if first run)
- task: DownloadPipelineArtifact@2
  displayName: Download Previous DL State
  continueOnError: true
  inputs:
    buildType: 'specific'
    project: '$(System.TeamProject)'  # optional
    definition: 11  # use current pipeline
    buildVersionToDownload: 'latest'
    branchName: 'refs/heads/main'  # adjust if your branch is different
    artifactName: 'DLReport'
    targetPath: 'prev'


# ✅ Download the PFX cert from DevOps secure file
- task: DownloadSecureFile@1
  name: fetchCert
  inputs:
    secureFile: 'DLTrackingCert.pfx'

# ✅ Install ExchangeOnline module
- task: PowerShell@2
  displayName: Install ExchangeOnline Module
  inputs:
    targetType: inline
    script: |
      Install-Module -Name ExchangeOnlineManagement -Force -Scope CurrentUser -AllowClobber

# ✅ Debug: show all scripts (optional)
- task: PowerShell@2
  displayName: Debug - List all .ps1 files
  inputs:
    targetType: inline
    script: |
      Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter *.ps1

# ✅ Run your DL script (without importing cert again)
- task: PowerShell@2
  displayName: Run DL Tracking Script
  inputs:
    targetType: inline
    script: |
      # Import certificate into memory and install into store
      $certPath = "$(fetchCert.secureFilePath)"
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($certPath, "$(PFX_PASSWORD)", "PersistKeySet")

      $store = New-Object System.Security.Cryptography.X509Certificates.X509Store "My", "CurrentUser"
      $store.Open("ReadWrite")
      $store.Add($cert)
      $store.Close()

      $thumbprint = $cert.Thumbprint

      # Handle first run
      $prevFile = "$(Build.SourcesDirectory)/$(DL_HISTORY_FILE)"
      if (-not (Test-Path $prevFile)) {
        '{}' | Out-File $prevFile -Encoding utf8
        Write-Host "No previous state found — initialized empty JSON "$prevFile"."
      }

      # Execute main script
      & "$(Build.SourcesDirectory)/Distribution_lists/DLchanges.ps1" `
        -appId "$(APP_ID)" `
        -orgName "$(ORG_DOMAIN)" `
        -thumbprint $thumbprint `
        -previous $prevFile `
        -report "$(DL_REPORT_FILE)"

# ✅ Move results to output folder
- task: PowerShell@2
  displayName: Move output files to folder
  inputs:
    targetType: inline
    script: |
      mkdir output
      Move-Item "$(DL_REPORT_FILE)" output/ -Force
      Move-Item "$(Build.SourcesDirectory)/$(DL_HISTORY_FILE)" output/ -Force

# ✅ Publish artifact
- publish: 'output'
  artifact: DLReport
  displayName: Publish Report + State Files
