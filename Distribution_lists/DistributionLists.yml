trigger: none

pool:
  vmImage: 'windows-latest'

variables:
- group: DL-Secrets  # only used for APP_ID, ORG_DOMAIN, PFX_PASSWORD

steps:
- checkout: self

# ✅ Download previous report artifact from last successful run
- task: DownloadPipelineArtifact@2
  displayName: Download Previous DL State
  continueOnError: true
  inputs:
    artifact: 'DLReport'
    path: '$(Build.SourcesDirectory)/prev'
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: 11
    runVersion: 'latest'

# ✅ Download PFX certificate
- task: DownloadSecureFile@1
  name: fetchCert
  inputs:
    secureFile: 'DLTrackingCert.pfx'

# ✅ Install ExchangeOnline module
- task: PowerShell@2
  displayName: Install ExchangeOnline Module
  inputs:
    targetType: inline
    script: |
      Install-Module ExchangeOnlineManagement -Force -Scope CurrentUser -AllowClobber

# ✅ Debug script path (optional)
- task: PowerShell@2
  displayName: Debug - List all .ps1 files
  inputs:
    targetType: inline
    script: |
      Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter *.ps1

# ✅ Run the main script
- task: PowerShell@2
  displayName: Run DL Tracking Script
  inputs:
    targetType: inline
    script: |
      # Import certificate
      $certPath = "$(fetchCert.secureFilePath)"
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($certPath, "$(PFX_PASSWORD)", "PersistKeySet")
      $store = New-Object System.Security.Cryptography.X509Certificates.X509Store "My", "CurrentUser"
      $store.Open("ReadWrite")
      $store.Add($cert)
      $store.Close()
      $thumbprint = $cert.Thumbprint

      # Define file paths directly (no variables)
      $prevFile = "$(Build.SourcesDirectory)/prev/previousMembers.json"
      $reportFile = "$(Build.SourcesDirectory)/DLchanges_Report.html"

      # Create baseline if missing
      if (-not (Test-Path $prevFile)) {
        '{}' | Out-File $prevFile -Encoding utf8
        Write-Host "No previous state found — initialized empty JSON at $prevFile"
      }

      & "$(Build.SourcesDirectory)/Distribution_lists/DLchanges.ps1" `
        -appId "$(APP_ID)" `
        -orgName "$(ORG_DOMAIN)" `
        -thumbprint $thumbprint `
        -previous $prevFile `
        -report $reportFile

# ✅ Move files for publishing
- task: PowerShell@2
  displayName: Move output files to folder
  inputs:
    targetType: inline
    script: |
      mkdir output
      Move-Item "$(Build.SourcesDirectory)/DLchanges_Report.html" output/ -Force
      Move-Item "$(Build.SourcesDirectory)/prev/previousMembers.json" output/ -Force

# ✅ Publish output folder as artifact
- publish: output
  artifact: DLReport
  displayName: Publish Report + State Files
