# azure-pipelines.yml
trigger:
  branches:
    include:
    - main
    - master
  paths:
    include:
    - get_test_with_updates.py  # Trigger when script changes
    - azure-pipelines.yml     # Trigger when pipeline changes

# Optional: Schedule to run daily at 9 AM UTC
schedules:
- cron: "0 9 * * *"
  displayName: Daily group report
  branches:
    include:
    - main
  always: true

variables:
- group: 'AzureAD-Secrets'  # Variable group containing your secrets
- name: 'pythonVersion'
  value: '3.9'

pool:
  name: 'Default'


stages:
- stage: 'GenerateGroupReport'
  displayName: 'Generate Azure AD Group Report'
  jobs:
  - job: 'GroupReport'
    displayName: 'Fetch and Compare Group Memberships'
    
    steps:

    # Step 3: Download previous artifacts (if available)
    - task: DownloadPipelineArtifact@2
      displayName: 'Download previous snapshot'
      inputs:
        source: 'specific'
        project: '$(System.TeamProject)'
        pipeline: '$(System.DefinitionId)'
        runVersion: 'latestFromBranch'
        runBranch: '$(Build.SourceBranch)'
        artifact: 'group-report-artifacts'
        path: '$(Pipeline.Workspace)'
      continueOnError: true  # Don't fail if no previous artifacts exist

    # Step 4: Run the group report script
    - script: |
        echo Current directory: %CD%
        dir /s /b
      displayName: ' List files in working directory'

    - script: |
        python $(Build.SourcesDirectory)/get_test_with_updates.py
      displayName: ' Run Python Script'  

    - script: |
        python get_test_with_updates.py
      displayName: 'Generate Group Report'
      env:
        TENANT_ID: $(TENANT_ID)
        CLIENT_ID: $(CLIENT_ID)
        CLIENT_SECRET: $(CLIENT_SECRET)
        GROUPS_FILTER: $(GROUPS_FILTER)  # Optional filter parameter
        BUILD_ARTIFACTSTAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)

    # Step 5: Publish artifacts
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Group Report Artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'group-report-artifacts'
        publishLocation: 'pipeline'
      condition: always()  # Always publish artifacts even if script has warnings

    # Step 6: Publish test results (optional - if you want the report in Tests tab)
    - task: PublishTestResults@2
      displayName: 'Publish Group Changes as Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/**/test-results.xml'
        mergeTestResults: true
        testRunTitle: 'Azure AD Group Changes'
      condition: and(succeeded(), eq(variables['GroupChangesDetected'], 'true'))
      continueOnError: true

- stage: 'NotifyOnChanges'
  displayName: 'Notify if Changes Detected'
  dependsOn: 'GenerateGroupReport'
  condition: and(succeeded(), eq(dependencies.GenerateGroupReport.outputs['GroupReport.GroupChangesDetected'], 'true'))
  jobs:
  - job: 'NotificationJob'
    displayName: 'Send Notifications'
    steps:
    
    # Download the generated reports
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Generated Reports'
      inputs:
        source: 'current'
        artifact: 'group-report-artifacts'
        path: '$(Pipeline.Workspace)/reports'

